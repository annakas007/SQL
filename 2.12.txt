1. Удалить из таблицы supply книги тех авторов, общее количество экземпляров 
 книг которых в таблице book превышает 10.

 DELETE FROM supply 
 WHERE author IN(
     SELECT author
     FROM book
     GROUP BY author
     HAVING SUM(amount) > 10
     );
 SELECT * FROM supply;

2. Для тех, кто уже оплатил штраф, вывести информацию о том, изменялась ли стандартная 
сумма штрафа.

Запрос:

SELECT  f.name, f.number_plate, f.violation, 
   if(
    f.sum_fine = tv.sum_fine, "Стандартная сумма штрафа", 
    if(
      f.sum_fine < tv.sum_fine, "Уменьшенная сумма штрафа", "Увеличенная сумма штрафа"
    )
  ) AS description               
FROM  fine f, traffic_violation tv
 WHERE tv.violation = f.violation and f.sum_fine IS NOT Null;

 Вывести информацию об оплаченных заказах за предыдущий и текущий год, информацию отсортировать по  client_id.

SELECT buy_id, client_id, book_id, date_payment, amount, price
FROM 
    buy_archive
UNION ALL
SELECT buy.buy_id, client_id, book_id, date_step_end, buy_book.amount, price
FROM 
    book 
    INNER JOIN buy_book USING(book_id)
    INNER JOIN buy USING(buy_id) 
    INNER JOIN buy_step USING(buy_id)
    INNER JOIN step USING(step_id)                  
WHERE  date_step_end IS NOT Null and name_step = "Оплата"  

 3. Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы. 
 Для этого вывести год, месяц, сумму выручки в отсортированном сначала по возрастанию месяцев, 
 затем по возрастанию лет виде. Название столбцов: Год, Месяц, Сумма.
 
 Для выделения года используем YEAR(), для выделения месяца используем MONTHNAME()
 
 select year(date_payment) Год, monthname(date_payment) Месяц, sum(price * amount) Сумма
from buy_archive
group by  Год, Месяц
union 
select year(buy_step.date_step_end) Год, monthname(buy_step.date_step_end) Месяц, 
           sum(book.price * buy_book.amount) Сумма
from book
     join buy_book
     on book.book_id = buy_book.book_id
             join buy_step
             on buy_step.buy_id = buy_book.buy_id
                    join step
                    on step.step_id = buy_step.step_id
 where buy_step.date_step_end is not null and step.name_step = "Оплата" 
 group by  Год, Месяц
order by Месяц, Год

4. Для каждой отдельной книги необходимо вывести информацию о количестве проданных экземпляров и их стоимости
 за 2020 и 2019 год . Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию 
 стоимости.
 
 select gg.title, sum(Количество) Количество, sum(Сумма) Сумма
from
    (select book.title, sum(buy_archive.amount) Количество, sum(buy_archive.amount * buy_archive.price) Сумма
     from buy_archive
         join book
         on book.book_id = buy_archive.book_id
     group by book.title   
     union 
         select book.title, sum(buy_book.amount) Количество, sum(buy_book.amount * book.price) Сумма
         from book
              join buy_book
              on book.book_id = buy_book.book_id
                      join buy
                      on buy_book.buy_id = buy.buy_id
                             join buy_step
                             on buy.buy_id = buy_step.buy_id
                                  join step 
                                  on step.step_id = buy_step.step_id
     where step.name_step = 'Оплата' and buy_step.date_step_end is not null
     group by book.title) gg
group by gg.title
order by Сумма desc

5. get person who bought more books and lived the comments

select client.name_client, sum(buy_book.amount) counter
        from client
             join buy
             on client.client_id = buy.client_id
                 join buy_book
                 on buy.buy_id = buy_book.buy_id
                 where buy.buy_description is not null
             group by client.name_client
             
having counter = 
        (select max(counter) maximum
        from
        (select client.name_client, sum(buy_book.amount) counter
        from client
             join buy
             on client.client_id = buy.client_id
                 join buy_book
                 on buy.buy_id = buy_book.buy_id
                 where buy.buy_description is not null
             group by client.name_client) ad)